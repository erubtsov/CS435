package org.example;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Pattern;
import scala.Tuple2;
import org.apache.spark.api.java.JavaPairRDD;
import org.apache.spark.api.java.JavaRDD;
import org.apache.spark.api.java.function.Function2;
import org.apache.spark.sql.SparkSession;
import java.util.Arrays;
import org.apache.spark.api.java.JavaSparkContext;

public final class JavaWordCount {
    private static final Pattern SPACES = Pattern.compile("\\s");

    static void showWarning() {
        String warning = "WARN: This is a naive implementation of PageRank with taxation " +
                "and is given as an example! \n" +
                "Please use the PageRank implementation found in " +
                "org.apache.spark.graphx.lib.PageRank for more conventional use.";
        System.err.println(warning);
    }

    private static class SumFunction implements Function2<Double, Double, Double> {
        @Override
        public Double call(Double a, Double b) {
            return a + b;
        }
    }

    public static void main(String[] args) throws Exception {
        if (args.length < 1) {
            System.err.println("Usage: JavaPageRank <file> <number_of_iterations> <taxation_factor>");
            System.exit(1);
        }
        showWarning();

        SparkSession spark = SparkSession
                .builder()
                .appName("JavaWordCount").master("local")
                .getOrCreate();

        JavaSparkContext jsc = new JavaSparkContext(spark.sparkContext());

        JavaRDD<String> lines = spark.read().textFile(args[0]).javaRDD();

        JavaPairRDD<String, List<String>> links = lines.mapToPair(s -> {
            String[] parts = s.split(":");
            String url = parts[0].trim();
            List<String> neighbors = new ArrayList<>();

            if (parts.length > 1) {
                String[] linksArray = parts[1].trim().split("\\s");
                neighbors = Arrays.asList(linksArray);
            }

            return new Tuple2<>(url, neighbors);
        });

        // Count the number of unique URLs
        long numUniqueUrls = links.keys().distinct().count();

        // Initialize ranks for each URL with a uniform distribution
        JavaPairRDD<String, Double> ranks = links.keys().mapToPair(url -> new Tuple2<>(url, 1.0 / numUniqueUrls));

        int numIterations = Integer.parseInt(args[1]);
        double taxationFactor = Double.parseDouble(args[2]);

        for (int current = 0; current < numIterations; current++) {
            System.out.println("PageRank Iteration " + current);
            JavaPairRDD<String, Double> contribs = links.join(ranks).values()
                    .flatMapToPair(pair -> {
                        Tuple2<List<String>, Double> neighborsAndRank = pair;
                        List<String> neighbors = neighborsAndRank._1;
                        Double rank = neighborsAndRank._2;
                        int numNeighbors = neighbors.size();
                        List<Tuple2<String, Double>> results = new ArrayList<>();
                        for (String neighbor : neighbors) {
                            results.add(new Tuple2<>(neighbor, (1 - taxationFactor) * rank / numNeighbors));
                        }
                        return results.iterator();
                    });

            // Apply taxation to redistribute the taxed PageRank equally
            double totalTax = taxationFactor * ranks.values().reduce((a, b) -> a + b) + 0.15;
            ranks = contribs.reduceByKey(new SumFunction())
                    .mapValues(rank -> rank + totalTax / numUniqueUrls);

            // Print PageRank values at each iteration
            List<Tuple2<String, Double>> iterationOutput = ranks.collect();
        }

        // Collect the PageRanks and sort them in descending order with taxation
        JavaPairRDD<Double, String> ranksSwapped = ranks.mapToPair(v -> v.swap()).sortByKey(false);
        List<Tuple2<Double, String>> output = ranksSwapped.take(10);
        System.out.println("Final PageRank Values with Taxation:");

        for (Tuple2<Double, String> tuple : output) {
            System.out.println(tuple._2() + " has rank with taxation: " + tuple._1());
        }

        // Convert the List to an RDD

        // Print PageRank values without taxation
        List<Tuple2<String, Double>> ranksWithoutTaxation = ranks.mapValues(rank -> (1 - taxationFactor) * rank).take(10);
        System.out.println("PageRank Values without Taxation:");
        for (Tuple2<String, Double> tuple : ranksWithoutTaxation) {
            System.out.println(tuple._1() + " has rank without taxation: " + tuple._2());
        }
        List<Tuple2<Double, String>> output2 = ranksSwapped.take(10);

        JavaRDD<Tuple2<Double, String>> outputRDD = jsc.parallelize(output);
        JavaRDD<Tuple2<Double, String>> outputRDD2 = jsc.parallelize(output2);

        // Save the final PageRank values to a text file
        //outputRDD.saveAsTextFile("/s/chopin/n/under/erubtsov/CS435/PA3/");
        //outputRDD2.saveAsTextFile("/s/chopin/n/under/erubtsov/CS435/PA3/");
        outputRDD.saveAsTextFile("/PA3/output");
        outputRDD2.saveAsTextFile("/PA3/output2");
        spark.stop();
    }
}
